class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        if (strs.empty()) {
        return "";
    }

    // Take the first string as the initial common prefix
    std::string prefix = strs[0];

    // Iterate through the remaining strings
    for (int i = 1; i < strs.size(); i++) {
        // Find the common prefix between the current string and the prefix
        int j = 0;
        while (j < prefix.length() && j < strs[i].length() && prefix[j] == strs[i][j]) {
            j++;
        }

        // Update the prefix to be the common prefix found so far
        prefix = prefix.substr(0, j);

        // If the prefix becomes empty, no common prefix exists
        if (prefix.empty()) {
            return "";
        }
    }

    return prefix;
}

int main() {
    std::vector<std::string> strs1 = {"flower", "flow", "flight"};
    std::cout << longestCommonPrefix(strs1) << std::endl;

    std::vector<std::string> strs2 = {"dog", "racecar", "car"};
    std::cout << longestCommonPrefix(strs2) << std::endl;

    return 0;
}
    };
